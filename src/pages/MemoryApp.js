import './css/MemoryApp.css';
import Card from '../components/Card';
import CardPile from '../components/CardPile';
import EndModal from '../components/EndModal';
import RuleModal from '../components/RuleModal';

import { getShuffle } from '../scripts/cards-util';
import { withRouter } from '../scripts/router_hoc';
import { checkAvailability, sendGameSummary } from '../_actions/api_actions';
import { delay } from '../scripts/anim-util';

import React from 'react';

const STARTING_HP = 7;
const MEMORY_RULES = "ECRIRE LES REGLES ICI"

class MemoryApp extends React.Component {
  
  currentCard;
  cardPile;

  constructor() {
    super();

    this.cardPile = React.createRef();

    this.state = {
      hp: STARTING_HP,
      endModalInfo : {title: "", info: "", show: false},
      board: [],
      canPlay: false,
      selected: null
    };
  }

  componentDidMount() {
    this.checkAccess();
    this.startGame();
  }

  async checkAccess() {

    let canAccess = localStorage.getItem('access_token');

    canAccess = canAccess && (await checkAvailability("Memory"));

    this.setState(() => ({
      canAccess : canAccess
    }), () => {
      if(!this.state.canAccess) this.props.navigate("/profil");
    });
  }

  async startGame() {

    //reset last game
    this.setState(() => ({
      hp: STARTING_HP,
      endModalInfo : {title: "", info: "", show: false},
      board: [],
      canPlay: false,
      selected: null
    }));
    await delay(20);

    //prepare card pile
    await this.initPile();
    await this.drawBoard();
  }

  async initPile() {
    let pile = getShuffle([
      { color:"♥", value:"K" },
      { color:"♥", value:"K" },
      { color:"♥", value:"2" },
      { color:"♥", value:"2" },
      { color:"♥", value:"7" },
      { color:"♥", value:"7" },
      { color:"♦", value:"J" },
      { color:"♦", value:"J" },
      { color:"♦", value:"1" },
      { color:"♦", value:"1" },
      { color:"♣", value:"1" },
      { color:"♣", value:"1" },
      { color:"♣", value:"K" },
      { color:"♣", value:"K" },
      { color:"♠", value:"5" },
      { color:"♠", value:"5" },
      { color:"♠", value:"Q" },
      { color:"♠", value:"Q" },
    ]);

    this.cardPile.current.emptyPile();
    this.cardPile.current.pushCards(pile);
  }

  async drawBoard() {
    let board = [];

    while(this.cardPile.current.getNbCard() > 0) {
      board.push(this.cardPile.current.shiftCard());
      this.setState(() => ({board: board}));
      await delay(160);
    }

    await delay(2400);

    for(let i = 0; i < board.length; i++) {
      board[i].visible = false;
      this.setState(() => ({board: board}));
      await delay(80);
    }

    this.setState(() => ({ canPlay: true }));

  }

  async selectCard(index) {

    if(!this.state.canPlay) {
      console.log("cant play now");
      return;
    }
    if(this.state.board[index].visible) {
      console.log("cant select visible card");
      return;
    }
    this.setState(() => ({canPlay: false}));

    let board = [...this.state.board];
    board[index].visible = true;

    this.setState(() => ({board: board}));

    if(this.state.selected !== null) {
      await this.compare(this.state.selected, index);
    }
    else {
      this.setState(() => ({selected: index}));
    }
    this.setState(() => ({canPlay: true}));
  }

  async compare(firstIndex, secondIndex) {
    let board = [...this.state.board];

    if(board[firstIndex].color === board[secondIndex].color && board[firstIndex].value === board[secondIndex].value) {
      this.setState(() => ({selected: null}), () => {
        this.checkGameOver();
      });
    }
    else {
      await delay(1000);

      board[firstIndex].visible = false;
      board[secondIndex].visible = false;
      
      let hp = this.state.hp-1;
      this.setState(() => ({
        board: board,
        selected: null,
        hp: hp
      }), () => {
        this.checkGameOver();
      });
    }
  }

  checkGameOver() {
    if(this.state.hp < 1) {
      this.gameOver(false);
      return;
    }

    let board = [...this.state.board];
    let victory = true;
    for(let card of board) {
      //console.log(card);
      victory = (victory && card.visible);
    }

    if(victory) {
      this.gameOver(true);
      return;
    }
  }

  async gameOver(playerWon) {
    await delay(500);

    let endModalInfo = {};
    endModalInfo.info = "Vous avez " + (playerWon ? "gagné":"perdu") +".";
    endModalInfo.title = "Victoire";
    endModalInfo.show = true;

    this.setState(() => ({endModalInfo: endModalInfo}));

    sendGameSummary("Memory", playerWon);
  }

  quitGame() {
    this.props.navigate("/profil");
  }

  render() {

    let endModal = null;
    if(this.state.endModalInfo.show)
      endModal = (<EndModal actionReplay={() => this.startGame()} info={this.state.endModalInfo.info} actionQuit={() => this.quitGame()}/>);

    let cardList = [];
    
    for(let i = 0; i < this.state.board.length; i++) {
      let card = this.state.board[i];
      cardList.push(<div className="memory-card-wrapper" onClick={() => this.selectCard(i)}><Card key={i} value={card.value} visible={card.visible} color={card.color}/></div>);
    }

    return (
      <div className="MemoryApp">
        <svg id="logo-memory" width="508" height="216" viewBox="0 0 508 216" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M22.0855 1.5311C15.8594 5.92965 9.04239 9.42553 1.83714 11.9149C1.44983 12.0845 1.12323 12.3678 0.900688 12.7273C0.678142 13.0868 0.570165 13.5055 0.591082 13.9278C0.394056 64.2333 0.197026 114.533 0 164.828C0 165.963 0.199692 166.426 1.21411 166.194C8.05943 164.597 15.6875 164.693 21.0472 166.29C21.6223 166.466 22.0616 166.29 22.6447 165.747C22.8956 165.454 23.081 165.11 23.1885 164.74C23.2959 164.369 23.3229 163.98 23.2677 163.598C23.6192 110.103 23.9679 56.6105 24.3141 3.12062C24.3141 2.59344 24.1064 1.75475 23.707 1.52311C23.4564 1.39281 23.1778 1.32547 22.8953 1.32686C22.6128 1.32825 22.3349 1.39835 22.0855 1.5311ZM61.3203 15.2856C53.7162 13.6881 45.7766 10.549 39.754 5.82839C39.5331 5.61227 39.2363 5.49125 38.9273 5.49125C38.6182 5.49125 38.3215 5.61227 38.1006 5.82839C34.4141 9.29869 30.4761 12.4918 26.3189 15.3815C26.0947 15.5788 25.9206 15.8265 25.8109 16.1042C25.7012 16.3819 25.659 16.6818 25.6879 16.979C25.6793 17.2637 25.7287 17.5472 25.833 17.8122C25.9374 18.0772 26.0946 18.3182 26.295 18.5206C29.9213 20.9168 33.987 23.8004 37.7651 25.302C38.0803 25.4553 38.3441 25.697 38.5242 25.9977C38.7044 26.2985 38.7931 26.6451 38.7795 26.9954C38.4706 66.6189 38.1565 106.245 37.837 145.874C37.837 146.888 38.3002 147.344 39.0511 147.12C44.8101 145.443 53.0772 146.784 59.0199 148.023C59.2864 148.036 59.5526 147.991 59.7997 147.89C60.0467 147.789 60.2686 147.635 60.4497 147.439C60.7089 147.178 60.9132 146.867 61.0504 146.526C61.1875 146.184 61.2549 145.819 61.2484 145.451L62.5185 16.8512C62.5504 15.9486 62.143 15.2537 61.3203 15.2856ZM99.6605 14.0156C91.8487 12.5379 83.0864 10.0219 77.9184 5.44499C77.7187 5.26921 77.4617 5.17225 77.1956 5.17225C76.9295 5.17225 76.6725 5.26921 76.4727 5.44499C73.046 8.49623 68.3174 11.5714 64.6352 13.9917C64.2517 14.2393 64.124 14.8703 64.0041 15.4134C63.9836 15.676 64.0283 15.9395 64.1342 16.1806C64.2401 16.4217 64.404 16.6328 64.6112 16.7953C68.2216 18.9439 72.2872 21.5878 76.0813 22.9217C76.385 23.0425 76.6443 23.2536 76.8242 23.5264C77.0042 23.7992 77.0962 24.1206 77.0877 24.4473C76.699 60.4126 76.3103 96.3804 75.9215 132.351C75.9215 133.254 76.3609 133.709 76.928 133.573C83.0304 132.135 90.9701 133.645 97.1924 135.003C97.4535 135.028 97.717 134.999 97.966 134.916C98.215 134.834 98.444 134.7 98.6381 134.524C99.1022 134.046 99.3848 133.422 99.4369 132.758C99.9055 93.662 100.374 54.563 100.843 15.4614C100.874 15.1124 100.767 14.7651 100.544 14.4946C100.321 14.224 100.001 14.052 99.6525 14.0156H99.6605Z" />
          <path d="M171.668 61.4694C165.63 65.1357 157.882 69.1375 151.316 70.5592C150.963 70.6195 150.643 70.8024 150.412 71.0757C150.181 71.349 150.054 71.6951 150.054 72.0529L149.655 104.003C149.567 111.28 147.793 113.516 137.905 119.179C137.622 119.306 137.377 119.503 137.194 119.752C137.011 120.001 136.895 120.294 136.858 120.601C136.848 120.857 136.92 121.109 137.064 121.32C137.207 121.532 137.416 121.691 137.657 121.775C153.481 125.298 173.274 117.135 173.489 98.923C173.665 84.2738 173.753 76.9493 173.921 62.3081C173.942 62.0673 173.872 61.8273 173.723 61.6362C173.575 61.4451 173.36 61.3171 173.122 61.2777C172.63 61.1712 172.116 61.239 171.668 61.4694ZM138.248 9.69421C141.911 11.821 145.751 13.625 149.726 15.0858C149.982 15.164 150.213 15.3099 150.393 15.5082C150.573 15.7064 150.696 15.9496 150.749 16.212C150.589 29.1279 150.501 35.5898 150.341 48.5216C150.341 48.905 150.557 49.4961 150.948 49.6159C151.185 49.6973 151.436 49.728 151.685 49.706C151.934 49.6839 152.176 49.6097 152.394 49.4881C158.87 45.8593 165.77 43.0475 172.938 41.1172C173.267 41.0592 173.568 40.895 173.794 40.6498C174.021 40.4045 174.161 40.0917 174.192 39.7593L174.552 9.07119C174.534 8.74732 174.401 8.4404 174.177 8.20598C173.953 7.97157 173.652 7.82514 173.33 7.79317C165.949 6.40334 157.506 2.80096 151.763 0.165074C151.503 0.0561087 151.223 0 150.941 0C150.658 0 150.378 0.0561087 150.118 0.165074C146.06 2.28177 142.13 5.06943 138.272 7.16216C138.082 7.29601 137.925 7.47272 137.816 7.67806C137.706 7.8834 137.646 8.11161 137.641 8.34432C137.632 8.60077 137.683 8.85582 137.788 9.08985C137.893 9.32387 138.051 9.53063 138.248 9.69421ZM147.889 62.9311C148.145 62.7874 148.357 62.5788 148.506 62.3263C148.655 62.0738 148.734 61.7864 148.736 61.4934C148.755 61.2734 148.708 61.0526 148.599 60.8602C148.491 60.6677 148.327 60.5126 148.129 60.4151C145.134 58.522 140.421 56.9884 136.635 56.0459C136.349 55.9768 136.094 55.8145 135.91 55.5845C135.727 55.3546 135.625 55.0701 135.62 54.7759C135.836 37.2033 135.948 28.417 136.172 10.9083C136.195 10.6749 136.15 10.4397 136.042 10.2314C135.934 10.023 135.768 9.85029 135.564 9.73414C134.973 9.41464 134.534 9.19898 133.919 9.56641C128.024 13.1049 119.853 16.875 113.615 17.7457C113.255 17.7915 112.926 17.9718 112.693 18.2503C112.46 18.5288 112.342 18.8849 112.361 19.2473C111.961 51.8152 111.559 84.3803 111.155 116.943C111.147 117.101 111.175 117.258 111.235 117.404C111.295 117.55 111.387 117.681 111.504 117.788C111.62 117.895 111.759 117.975 111.91 118.022C112.061 118.069 112.22 118.082 112.377 118.061C119.222 117.782 126.85 118.109 132.521 120.138C132.807 120.242 133.117 120.259 133.412 120.188C133.707 120.117 133.975 119.961 134.183 119.738C134.383 119.579 134.543 119.376 134.653 119.145C134.762 118.913 134.817 118.66 134.814 118.405C134.981 105.161 135.069 98.5396 135.229 85.2962C135.349 76.8295 140.197 68.2189 147.897 62.9311H147.889Z" />
          <path d="M207.029 1.80246C200.547 4.79508 193.738 7.02263 186.741 8.4401C186.417 8.47388 186.115 8.61895 185.886 8.85056C185.658 9.08218 185.516 9.38597 185.487 9.71011C185.13 41.8946 184.765 74.071 184.392 106.24C184.392 106.966 184.592 107.294 185.622 107.342C192.576 107.619 199.434 109.06 205.911 111.607C206.171 111.73 206.454 111.793 206.741 111.793C207.029 111.793 207.312 111.73 207.572 111.607C208.195 111.375 208.203 110.808 208.211 110.313C208.573 74.4864 208.93 38.6649 209.281 2.84882C209.286 2.63338 209.232 2.42077 209.125 2.23367C209.018 2.04657 208.862 1.89201 208.674 1.78648C208.14 1.60407 207.56 1.60971 207.029 1.80246ZM246.344 11.9546C238.716 10.5568 230.784 8.16853 224.737 4.81376C224.488 4.66294 224.202 4.58321 223.911 4.58321C223.619 4.58321 223.333 4.66294 223.084 4.81376C219.316 7.23012 215.363 9.3454 211.262 11.1399C211.062 11.2319 210.894 11.3828 210.781 11.5726C210.668 11.7624 210.616 11.982 210.631 12.2022C210.636 12.4158 210.694 12.6248 210.802 12.8093C210.91 12.9938 211.063 13.1478 211.246 13.2566C214.865 14.9499 218.938 17.0587 222.756 18.2568C223.033 18.3263 223.28 18.481 223.463 18.6989C223.647 18.9168 223.757 19.1868 223.779 19.4709C223.534 46.8735 223.289 74.2814 223.044 101.695C223.04 101.854 223.07 102.013 223.132 102.161C223.194 102.308 223.286 102.44 223.403 102.549C223.52 102.658 223.659 102.741 223.811 102.792C223.962 102.843 224.123 102.861 224.282 102.845C230.568 103.06 238.476 106.088 244.61 108.716C245.078 108.895 245.596 108.895 246.064 108.716C246.314 108.624 246.529 108.457 246.68 108.238C246.832 108.02 246.912 107.76 246.911 107.494C247.134 76.0759 247.355 44.6396 247.574 13.1847C247.59 13.0188 247.569 12.8515 247.513 12.6946C247.457 12.5377 247.367 12.3951 247.249 12.2769C247.132 12.1587 246.99 12.0679 246.833 12.0108C246.677 11.9537 246.51 11.9318 246.344 11.9466V11.9546ZM284.732 12.2182C276.896 10.7325 268.285 8.6318 262.894 4.93357C262.677 4.79831 262.427 4.7266 262.171 4.7266C261.915 4.7266 261.665 4.79831 261.448 4.93357C257.678 7.28789 253.734 9.35197 249.65 11.1079C249.259 11.2916 249.131 11.7789 249.027 12.1463C249.022 12.3587 249.076 12.5684 249.183 12.7519C249.29 12.9353 249.447 13.0852 249.635 13.1847C253.269 14.886 257.342 17.0187 261.169 18.2568C261.444 18.3285 261.69 18.4838 261.873 18.7012C262.056 18.9187 262.167 19.1876 262.191 19.4709C262.036 46.932 261.879 74.3879 261.72 101.838C261.703 102.137 261.8 102.43 261.991 102.66C262.183 102.89 262.454 103.039 262.75 103.076C269.3 103.771 276.928 107.334 283.31 110.561C283.766 110.783 284.289 110.82 284.772 110.665C284.999 110.557 285.195 110.394 285.341 110.19C285.488 109.986 285.581 109.748 285.61 109.498L285.97 13.4643C285.97 13.1321 285.841 12.813 285.61 12.5744C285.379 12.3358 285.064 12.1966 284.732 12.1863V12.2182Z" />
          <path d="M332.785 111.687C322.824 106.735 321.163 104.842 321.163 97.9963L321.259 8.8234C321.273 8.57569 321.224 8.32839 321.117 8.10481C321.009 7.88122 320.846 7.68871 320.644 7.5454C320.394 7.39458 320.108 7.31485 319.817 7.31485C319.526 7.31485 319.24 7.39458 318.99 7.5454C313.255 10.5887 305.635 12.5775 298.798 13.7837C298.479 13.8035 298.178 13.9369 297.95 14.1596C297.721 14.3824 297.58 14.6798 297.552 14.9978C297.483 41.4685 297.408 67.9392 297.328 94.4099C297.28 111.982 316.937 118.372 333.024 114.075C333.257 113.988 333.459 113.832 333.601 113.628C333.744 113.424 333.821 113.182 333.823 112.933C333.765 112.656 333.64 112.398 333.459 112.181C333.278 111.964 333.046 111.794 332.785 111.687ZM324.158 5.60442C323.926 5.72356 323.729 5.90257 323.589 6.123C323.448 6.34343 323.369 6.59731 323.359 6.85847C323.359 7.40163 323.791 7.76107 324.39 7.96076C334.127 11.2277 335.94 13.3044 335.94 20.3095C335.94 50.513 335.94 80.7166 335.94 110.92C335.901 111.161 335.94 111.409 336.05 111.627C336.161 111.845 336.337 112.023 336.555 112.134C337.178 112.422 337.609 112.653 338.216 112.422C343.983 110.233 351.444 109.379 358.529 109.371C358.683 109.388 358.839 109.374 358.987 109.328C359.135 109.281 359.272 109.205 359.389 109.102C359.505 109 359.599 108.874 359.664 108.733C359.73 108.592 359.764 108.439 359.767 108.284C359.767 79.6569 359.74 51.0295 359.687 22.4022C359.631 3.39986 340.253 -1.09712 324.158 5.60442Z" />
          <path d="M393.25 8.13679C386.913 11.4258 380.112 13.7338 373.082 14.9821C372.75 15.0186 372.443 15.1737 372.217 15.4189C371.991 15.664 371.861 15.9827 371.852 16.316C371.894 49.4856 371.937 82.6632 371.98 115.849C372.01 116.215 372.142 116.565 372.361 116.86C372.58 117.155 372.876 117.383 373.218 117.518C380.079 120.713 387.731 124.978 393.482 130.298C394.097 130.873 394.544 131.169 395.127 131.009C395.503 130.905 395.751 130.378 395.751 129.755L395.551 9.43078C395.559 9.18735 395.507 8.94565 395.4 8.72697C395.293 8.50829 395.133 8.31933 394.936 8.17673C394.672 8.05679 394.387 7.99144 394.097 7.98457C393.808 7.97771 393.52 8.02948 393.25 8.13679ZM398.402 6.5952C398.16 6.74889 397.959 6.96104 397.82 7.21223C397.68 7.46342 397.606 7.74562 397.604 8.03296C397.623 8.32739 397.733 8.60859 397.919 8.83759C398.105 9.06658 398.358 9.23201 398.642 9.31096C408.379 13.153 410.192 15.6371 410.208 23.7844C410.208 43.9369 410.256 54.0092 410.288 74.1059C410.286 74.3691 410.339 74.6298 410.445 74.8708C410.551 75.1117 410.707 75.3274 410.903 75.5037C411.124 75.7017 411.394 75.836 411.685 75.8923C411.977 75.9485 412.278 75.9247 412.556 75.8232C418.148 73.379 425.728 71.9732 432.717 71.6137C432.887 71.6076 433.054 71.5677 433.208 71.4962C433.363 71.4247 433.501 71.3231 433.616 71.1974C433.73 71.0716 433.819 70.9243 433.875 70.764C433.932 70.6037 433.957 70.4337 433.947 70.2639C433.947 52.867 433.947 44.1686 433.947 26.7478C433.859 4.19894 414.473 -1.00095 398.402 6.5952ZM432.749 91.3909C425.137 87.8924 417.125 81.6461 411.119 77.5086C410.882 77.343 410.613 77.2284 410.33 77.172C410.047 77.1156 409.755 77.1187 409.473 77.1811C405.519 78.7786 401.557 81.1349 397.731 82.4448C397.536 82.5585 397.375 82.7235 397.267 82.9221C397.158 83.1206 397.106 83.3451 397.116 83.5711C397.1 83.8324 397.149 84.0936 397.257 84.3318C397.366 84.5699 397.532 84.7778 397.739 84.937C401.422 87.7486 405.439 91.287 409.289 93.8031C409.576 93.9513 409.82 94.1683 410.002 94.4346C410.183 94.701 410.295 95.0082 410.328 95.3287C410.328 107.829 410.328 114.075 410.376 126.56C410.4 126.957 410.527 127.341 410.744 127.674C410.961 128.007 411.261 128.278 411.614 128.461C418.938 132.729 425.709 137.882 431.774 143.805C432.169 144.16 432.681 144.359 433.212 144.364C433.452 144.325 433.668 144.196 433.817 144.003C433.965 143.81 434.034 143.568 434.011 143.326C434.011 123.357 434.011 113.317 433.963 93.2919C433.947 92.892 433.822 92.504 433.603 92.1692C433.383 91.8344 433.077 91.5654 432.717 91.3909H432.749Z" />
          <path d="M505.787 7.34599C499.589 11.9388 491.729 14.7185 485.371 16.5556C485.044 16.7191 484.771 16.975 484.588 17.2917C484.405 17.6083 484.319 17.9717 484.34 18.3368C484.239 71.0013 484.141 123.661 484.045 176.314C484.045 176.834 483.837 177.512 483.43 177.552C483.17 177.592 482.904 177.567 482.656 177.479C482.408 177.391 482.185 177.244 482.008 177.049C478.917 174.022 477.375 172.536 474.284 169.637C454.946 151.353 442.981 166.402 446.328 185.444C446.47 186.18 446.826 186.858 447.35 187.393C447.941 187.808 448.62 188.056 448.948 187.792C455.561 183 457.933 181.89 465.266 189.214C475.211 198.847 480.163 203.959 490.027 214.902C490.634 215.573 491.393 215.701 491.625 215.174C494.261 209.726 501.817 206.579 506.642 203.831C506.846 203.684 507.009 203.488 507.115 203.26C507.221 203.032 507.267 202.78 507.249 202.529C507.499 138.054 507.749 73.5813 507.999 9.11123C508.008 8.78164 507.94 8.4546 507.801 8.15542C507.663 7.85624 507.457 7.59295 507.201 7.38593C506.988 7.25874 506.747 7.18826 506.499 7.18127C506.251 7.17427 506.006 7.23099 505.787 7.34599ZM481.217 160.219C481.488 160.101 481.712 159.897 481.856 159.639C482.001 159.38 482.057 159.082 482.016 158.79C481.885 158.021 481.533 157.307 481.002 156.737C471.241 147.671 469.587 144.404 469.595 134.843C469.627 92.6103 469.662 50.3775 469.699 8.14474C469.722 7.82169 469.68 7.49729 469.574 7.19114C469.468 6.88499 469.302 6.60345 469.084 6.36353C468.87 6.1425 468.577 6.01446 468.27 6.00699C467.962 5.99952 467.663 6.11321 467.439 6.32359C461.776 10.4931 454.044 13.1449 447.238 14.6146C446.881 14.699 446.563 14.9039 446.339 15.1948C446.115 15.4858 445.998 15.8451 446.008 16.2121L446.056 124.507C446.2 143.605 461.312 161.394 481.217 160.219Z" />
        </svg>
        <div className="memory-left-panel">
          <CardPile ref={this.cardPile} cards={[]}/>
          <div className="life-counter">Vie restantes : {this.state.hp}</div>
        </div>
        <div className="memory-board">
          {cardList}
        </div>
        {endModal}
        <RuleModal text={MEMORY_RULES}/>
      </div>
    );
  }
}

export default withRouter(MemoryApp);
